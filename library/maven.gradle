/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return android.defaultConfig.versionName.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('nexus.username') ? getProperty('nexus.username') : ''
}

def getRepositoryPassword() {
    return hasProperty('nexus.password') ? getProperty('nexus.password') : ''
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = 'com.github.porokoro.paperboy'
                pom.artifactId = 'paperboy'
                pom.version = android.defaultConfig.versionName

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name 'Paperboy'
                    packaging 'aar'
                    description 'A changelog library for Android'
                    url 'https://github.com/porokoro/paperboy'

                    scm {
                        url 'https://github.com/porokoro/paperboy'
                        connection 'scm:git:https://github.com/porokoro/paperboy.git'
                        developerConnection 'scm:git:https://github.com/porokoro/paperboy.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'porokoro'
                            name 'Poro Koro'
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    android.libraryVariants.all { variant ->
        if (!variant.name.equals('release'))
            return

        task androidJavadoc(type: Javadoc, dependsOn: [assembleDebug, assembleRelease]) {
            title = "${rootProject.name} ${android.defaultConfig.versionName} API"
            description = "Generates javadoc for ${variant.name}."

            source = variant.javaCompile.source
            destinationDir = new File(destinationDir, variant.baseName)

            classpath = files(android.bootClasspath, variant.javaCompile.classpath)
            options.links 'http://docs.oracle.com/javase/7/docs/api/'
            options.linksOffline 'http://d.android.com/reference/',
                    "${android.sdkDirectory}/docs/reference/"

            exclude '**/BuildConfig.java'
            exclude '**/R.java'

            failOnError false
        }
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocJar
    }
}